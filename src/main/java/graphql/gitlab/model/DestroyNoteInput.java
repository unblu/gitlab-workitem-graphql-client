package graphql.gitlab.model;

import java.util.Objects;

import org.eclipse.microprofile.graphql.Name;

import com.fasterxml.jackson.annotation.JsonProperty;

import graphql.gitlab.GitLabInputRequest;

/**
 * Autogenerated input type of DestroyNote
 */
@Name("DestroyNoteInput")
public class DestroyNoteInput implements GitLabInputRequest {

    /**
     * A unique identifier for the client performing the mutation.
     */
    private String clientMutationId;

    /**
     * Global ID of the note to destroy.
     */
    private NoteID id;

    public String getClientMutationId() {
        return clientMutationId;
    }

    public DestroyNoteInput setClientMutationId(String clientMutationId) {
        this.clientMutationId = clientMutationId;
        return this;
    }

    public NoteID getId() {
        return id;
    }

    public DestroyNoteInput setId(NoteID id) {
        this.id = id;
        return this;
    }

    @JsonProperty("__typename")
    public String getTypename() {
        return "DestroyNoteInput";
    }

    @JsonProperty("__typename")
    public void setTypename(String type) {
        //Setter only for Jackson
        if(!"DestroyNoteInput".equals(type)) {
            throw new IllegalArgumentException("Unexpected '__typename' value: " + type);
        }
    }

    @Override
    public int hashCode() {
        return Objects.hash(clientMutationId, id);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        DestroyNoteInput other = (DestroyNoteInput) obj;
        return Objects.equals(clientMutationId, other.clientMutationId) && Objects.equals(id, other.id);
    }

    @Override
    public String toString() {
        return "DestroyNoteInput [clientMutationId=" + clientMutationId + ", id=" + id + "]";
    }

}
