package graphql.gitlab.model;

import java.util.Objects;

import org.eclipse.microprofile.graphql.Name;

/**
 * Autogenerated input type of CreateNote
 */
@Name("CreateNoteInput")
public class CreateNoteInput {

    /**
     * Global ID of the resource to add a note to.
     */
    private NoteableID noteableId;
    /**
     * Content of the note.
     */
    private String body;
    /**
     * Internal flag for a note. Default is false.
     */
    private Boolean internal;
    /**
     * Global ID of the discussion the note is in reply to.
     */
    private DiscussionID discussionId;
    /**
     * SHA of the head commit which is used to ensure that the merge request has not been updated since the request was sent.
     */
    private String mergeRequestDiffHeadSha;

    public NoteableID getNoteableId() {
        return noteableId;
    }

    public CreateNoteInput setNoteableId(NoteableID noteableId) {
        this.noteableId = noteableId;
        return this;
    }

    public String getBody() {
        return body;
    }

    public CreateNoteInput setBody(String body) {
        this.body = body;
        return this;
    }

    public Boolean getInternal() {
        return internal;
    }

    public CreateNoteInput setInternal(Boolean internal) {
        this.internal = internal;
        return this;
    }

    public DiscussionID getDiscussionId() {
        return discussionId;
    }

    public CreateNoteInput setDiscussionId(DiscussionID discussionId) {
        this.discussionId = discussionId;
        return this;
    }

    public String getMergeRequestDiffHeadSha() {
        return mergeRequestDiffHeadSha;
    }

    public CreateNoteInput setMergeRequestDiffHeadSha(String mergeRequestDiffHeadSha) {
        this.mergeRequestDiffHeadSha = mergeRequestDiffHeadSha;
        return this;
    }

    @Override
    public int hashCode() {
        return Objects.hash(noteableId, body, internal, discussionId, mergeRequestDiffHeadSha);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        CreateNoteInput other = (CreateNoteInput) obj;
        return Objects.equals(noteableId, other.noteableId) && Objects.equals(body, other.body) && Objects.equals(internal, other.internal) && Objects.equals(discussionId, other.discussionId) && Objects.equals(mergeRequestDiffHeadSha, other.mergeRequestDiffHeadSha);
    }

    @Override
    public String toString() {
        return "CreateNoteInput [noteableId=" + noteableId + ", body=" + body + ", internal=" + internal + ", discussionId=" + discussionId + ", mergeRequestDiffHeadSha=" + mergeRequestDiffHeadSha + "]";
    }

}
