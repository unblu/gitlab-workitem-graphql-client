package graphql.gitlab.model;

import java.util.Objects;

import org.eclipse.microprofile.graphql.Name;

import graphql.gitlab.GitLabInputRequest;

/**
 * Autogenerated input type of AwardEmojiAdd
 */
@Name("AwardEmojiAddInput")
public class AwardEmojiAddInput implements GitLabInputRequest {

    /**
     * A unique identifier for the client performing the mutation.
     */
    private String clientMutationId;

    /**
     * Global ID of the awardable resource.
     */
    private AwardableID awardableId;

    /**
     * Emoji name.
     */
    private String name;

    public String getClientMutationId() {
        return clientMutationId;
    }

    public AwardEmojiAddInput setClientMutationId(String clientMutationId) {
        this.clientMutationId = clientMutationId;
        return this;
    }

    public AwardableID getAwardableId() {
        return awardableId;
    }

    public AwardEmojiAddInput setAwardableId(AwardableID awardableId) {
        this.awardableId = awardableId;
        return this;
    }

    public String getName() {
        return name;
    }

    public AwardEmojiAddInput setName(String name) {
        this.name = name;
        return this;
    }

    @Override
    public int hashCode() {
        return Objects.hash(clientMutationId, awardableId, name);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        AwardEmojiAddInput other = (AwardEmojiAddInput) obj;
        return Objects.equals(clientMutationId, other.clientMutationId) && Objects.equals(awardableId, other.awardableId) && Objects.equals(name, other.name);
    }

    @Override
    public String toString() {
        return "AwardEmojiAddInput [clientMutationId=" + clientMutationId + ", awardableId=" + awardableId + ", name=" + name + "]";
    }

}
