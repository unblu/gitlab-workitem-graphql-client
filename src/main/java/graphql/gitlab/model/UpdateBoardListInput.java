package graphql.gitlab.model;

import java.util.Objects;

import org.eclipse.microprofile.graphql.Name;

import com.fasterxml.jackson.annotation.JsonProperty;

import graphql.gitlab.GitLabInputRequest;

/**
 * Autogenerated input type of UpdateBoardList
 */
@Name("UpdateBoardListInput")
public class UpdateBoardListInput implements GitLabInputRequest {

    /**
     * A unique identifier for the client performing the mutation.
     */
    private String clientMutationId;

    /**
     * Position of list within the board.
     */
    private Integer position;

    /**
     * Indicates if the list is collapsed for the user.
     */
    private Boolean collapsed;

    /**
     * Global ID of the list.
     */
    private ListID listId;

    public String getClientMutationId() {
        return clientMutationId;
    }

    public UpdateBoardListInput setClientMutationId(String clientMutationId) {
        this.clientMutationId = clientMutationId;
        return this;
    }

    public Integer getPosition() {
        return position;
    }

    public UpdateBoardListInput setPosition(Integer position) {
        this.position = position;
        return this;
    }

    public Boolean getCollapsed() {
        return collapsed;
    }

    public UpdateBoardListInput setCollapsed(Boolean collapsed) {
        this.collapsed = collapsed;
        return this;
    }

    public ListID getListId() {
        return listId;
    }

    public UpdateBoardListInput setListId(ListID listId) {
        this.listId = listId;
        return this;
    }

    @JsonProperty("__typename")
    public String getTypename() {
        return "UpdateBoardListInput";
    }

    @JsonProperty("__typename")
    public void setTypename(String type) {
        //Setter only for Jackson
        if(!"UpdateBoardListInput".equals(type)) {
            throw new IllegalArgumentException("Unexpected '__typename' value: " + type);
        }
    }

    @Override
    public int hashCode() {
        return Objects.hash(clientMutationId, position, collapsed, listId);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        UpdateBoardListInput other = (UpdateBoardListInput) obj;
        return Objects.equals(clientMutationId, other.clientMutationId) && Objects.equals(position, other.position) && Objects.equals(collapsed, other.collapsed) && Objects.equals(listId, other.listId);
    }

    @Override
    public String toString() {
        return "UpdateBoardListInput [clientMutationId=" + clientMutationId + ", position=" + position + ", collapsed=" + collapsed + ", listId=" + listId + "]";
    }

}
