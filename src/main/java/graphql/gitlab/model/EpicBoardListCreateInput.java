package graphql.gitlab.model;

import java.util.Objects;

import org.eclipse.microprofile.graphql.Name;

import com.fasterxml.jackson.annotation.JsonProperty;

import graphql.gitlab.GitLabInputRequest;

/**
 * Autogenerated input type of EpicBoardListCreate
 */
@Name("EpicBoardListCreateInput")
public class EpicBoardListCreateInput implements GitLabInputRequest {

    /**
     * A unique identifier for the client performing the mutation.
     */
    private String clientMutationId;

    /**
     * Create the backlog list.
     */
    private Boolean backlog;

    /**
     * Global ID of an existing label.
     */
    private LabelID labelId;

    /**
     * Global ID of the issue board to mutate.
     */
    private BoardsEpicBoardID boardId;

    public String getClientMutationId() {
        return clientMutationId;
    }

    public EpicBoardListCreateInput setClientMutationId(String clientMutationId) {
        this.clientMutationId = clientMutationId;
        return this;
    }

    public Boolean getBacklog() {
        return backlog;
    }

    public EpicBoardListCreateInput setBacklog(Boolean backlog) {
        this.backlog = backlog;
        return this;
    }

    public LabelID getLabelId() {
        return labelId;
    }

    public EpicBoardListCreateInput setLabelId(LabelID labelId) {
        this.labelId = labelId;
        return this;
    }

    public BoardsEpicBoardID getBoardId() {
        return boardId;
    }

    public EpicBoardListCreateInput setBoardId(BoardsEpicBoardID boardId) {
        this.boardId = boardId;
        return this;
    }

    @JsonProperty("__typename")
    public String getTypename() {
        return "EpicBoardListCreateInput";
    }

    @JsonProperty("__typename")
    public void setTypename(String type) {
        //Setter only for Jackson
        if(!"EpicBoardListCreateInput".equals(type)) {
            throw new IllegalArgumentException("Unexpected '__typename' value: " + type);
        }
    }

    @Override
    public int hashCode() {
        return Objects.hash(clientMutationId, backlog, labelId, boardId);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        EpicBoardListCreateInput other = (EpicBoardListCreateInput) obj;
        return Objects.equals(clientMutationId, other.clientMutationId) && Objects.equals(backlog, other.backlog) && Objects.equals(labelId, other.labelId) && Objects.equals(boardId, other.boardId);
    }

    @Override
    public String toString() {
        return "EpicBoardListCreateInput [clientMutationId=" + clientMutationId + ", backlog=" + backlog + ", labelId=" + labelId + ", boardId=" + boardId + "]";
    }

}
